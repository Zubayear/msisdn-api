// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"huspass/ent/msisdn"
	"huspass/model"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// MsisdnCreate is the builder for creating a Msisdn entity.
type MsisdnCreate struct {
	config
	mutation *MsisdnMutation
	hooks    []Hook
}

// SetPrimaryIdentity sets the "primary_identity" field.
func (mc *MsisdnCreate) SetPrimaryIdentity(s string) *MsisdnCreate {
	mc.mutation.SetPrimaryIdentity(s)
	return mc
}

// SetPrimaryIdentityType sets the "primary_identity_type" field.
func (mc *MsisdnCreate) SetPrimaryIdentityType(mit model.PrimaryIdentityType) *MsisdnCreate {
	mc.mutation.SetPrimaryIdentityType(mit)
	return mc
}

// SetProvisioned sets the "provisioned" field.
func (mc *MsisdnCreate) SetProvisioned(b bool) *MsisdnCreate {
	mc.mutation.SetProvisioned(b)
	return mc
}

// SetNillableProvisioned sets the "provisioned" field if the given value is not nil.
func (mc *MsisdnCreate) SetNillableProvisioned(b *bool) *MsisdnCreate {
	if b != nil {
		mc.SetProvisioned(*b)
	}
	return mc
}

// SetID sets the "id" field.
func (mc *MsisdnCreate) SetID(u uuid.UUID) *MsisdnCreate {
	mc.mutation.SetID(u)
	return mc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mc *MsisdnCreate) SetNillableID(u *uuid.UUID) *MsisdnCreate {
	if u != nil {
		mc.SetID(*u)
	}
	return mc
}

// Mutation returns the MsisdnMutation object of the builder.
func (mc *MsisdnCreate) Mutation() *MsisdnMutation {
	return mc.mutation
}

// Save creates the Msisdn in the database.
func (mc *MsisdnCreate) Save(ctx context.Context) (*Msisdn, error) {
	var (
		err  error
		node *Msisdn
	)
	mc.defaults()
	if len(mc.hooks) == 0 {
		if err = mc.check(); err != nil {
			return nil, err
		}
		node, err = mc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MsisdnMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mc.check(); err != nil {
				return nil, err
			}
			mc.mutation = mutation
			if node, err = mc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(mc.hooks) - 1; i >= 0; i-- {
			if mc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, mc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Msisdn)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from MsisdnMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MsisdnCreate) SaveX(ctx context.Context) *Msisdn {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MsisdnCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MsisdnCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *MsisdnCreate) defaults() {
	if _, ok := mc.mutation.Provisioned(); !ok {
		v := msisdn.DefaultProvisioned
		mc.mutation.SetProvisioned(v)
	}
	if _, ok := mc.mutation.ID(); !ok {
		v := msisdn.DefaultID()
		mc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MsisdnCreate) check() error {
	if _, ok := mc.mutation.PrimaryIdentity(); !ok {
		return &ValidationError{Name: "primary_identity", err: errors.New(`ent: missing required field "Msisdn.primary_identity"`)}
	}
	if v, ok := mc.mutation.PrimaryIdentity(); ok {
		if err := msisdn.PrimaryIdentityValidator(v); err != nil {
			return &ValidationError{Name: "primary_identity", err: fmt.Errorf(`ent: validator failed for field "Msisdn.primary_identity": %w`, err)}
		}
	}
	if _, ok := mc.mutation.PrimaryIdentityType(); !ok {
		return &ValidationError{Name: "primary_identity_type", err: errors.New(`ent: missing required field "Msisdn.primary_identity_type"`)}
	}
	if v, ok := mc.mutation.PrimaryIdentityType(); ok {
		if err := msisdn.PrimaryIdentityTypeValidator(v); err != nil {
			return &ValidationError{Name: "primary_identity_type", err: fmt.Errorf(`ent: validator failed for field "Msisdn.primary_identity_type": %w`, err)}
		}
	}
	if _, ok := mc.mutation.Provisioned(); !ok {
		return &ValidationError{Name: "provisioned", err: errors.New(`ent: missing required field "Msisdn.provisioned"`)}
	}
	return nil
}

func (mc *MsisdnCreate) sqlSave(ctx context.Context) (*Msisdn, error) {
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (mc *MsisdnCreate) createSpec() (*Msisdn, *sqlgraph.CreateSpec) {
	var (
		_node = &Msisdn{config: mc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: msisdn.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: msisdn.FieldID,
			},
		}
	)
	if id, ok := mc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := mc.mutation.PrimaryIdentity(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: msisdn.FieldPrimaryIdentity,
		})
		_node.PrimaryIdentity = value
	}
	if value, ok := mc.mutation.PrimaryIdentityType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: msisdn.FieldPrimaryIdentityType,
		})
		_node.PrimaryIdentityType = value
	}
	if value, ok := mc.mutation.Provisioned(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: msisdn.FieldProvisioned,
		})
		_node.Provisioned = value
	}
	return _node, _spec
}

// MsisdnCreateBulk is the builder for creating many Msisdn entities in bulk.
type MsisdnCreateBulk struct {
	config
	builders []*MsisdnCreate
}

// Save creates the Msisdn entities in the database.
func (mcb *MsisdnCreateBulk) Save(ctx context.Context) ([]*Msisdn, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Msisdn, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MsisdnMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MsisdnCreateBulk) SaveX(ctx context.Context) []*Msisdn {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MsisdnCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MsisdnCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}
