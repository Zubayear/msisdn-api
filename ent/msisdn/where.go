// Code generated by ent, DO NOT EDIT.

package msisdn

import (
	"huspass/ent/predicate"
	"huspass/model"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Msisdn {
	return predicate.Msisdn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Msisdn {
	return predicate.Msisdn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Msisdn {
	return predicate.Msisdn(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Msisdn {
	return predicate.Msisdn(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Msisdn {
	return predicate.Msisdn(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Msisdn {
	return predicate.Msisdn(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Msisdn {
	return predicate.Msisdn(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Msisdn {
	return predicate.Msisdn(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Msisdn {
	return predicate.Msisdn(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// PrimaryIdentity applies equality check predicate on the "primary_identity" field. It's identical to PrimaryIdentityEQ.
func PrimaryIdentity(v string) predicate.Msisdn {
	return predicate.Msisdn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrimaryIdentity), v))
	})
}

// Provisioned applies equality check predicate on the "provisioned" field. It's identical to ProvisionedEQ.
func Provisioned(v bool) predicate.Msisdn {
	return predicate.Msisdn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProvisioned), v))
	})
}

// PrimaryIdentityEQ applies the EQ predicate on the "primary_identity" field.
func PrimaryIdentityEQ(v string) predicate.Msisdn {
	return predicate.Msisdn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrimaryIdentity), v))
	})
}

// PrimaryIdentityNEQ applies the NEQ predicate on the "primary_identity" field.
func PrimaryIdentityNEQ(v string) predicate.Msisdn {
	return predicate.Msisdn(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrimaryIdentity), v))
	})
}

// PrimaryIdentityIn applies the In predicate on the "primary_identity" field.
func PrimaryIdentityIn(vs ...string) predicate.Msisdn {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Msisdn(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPrimaryIdentity), v...))
	})
}

// PrimaryIdentityNotIn applies the NotIn predicate on the "primary_identity" field.
func PrimaryIdentityNotIn(vs ...string) predicate.Msisdn {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Msisdn(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPrimaryIdentity), v...))
	})
}

// PrimaryIdentityGT applies the GT predicate on the "primary_identity" field.
func PrimaryIdentityGT(v string) predicate.Msisdn {
	return predicate.Msisdn(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPrimaryIdentity), v))
	})
}

// PrimaryIdentityGTE applies the GTE predicate on the "primary_identity" field.
func PrimaryIdentityGTE(v string) predicate.Msisdn {
	return predicate.Msisdn(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPrimaryIdentity), v))
	})
}

// PrimaryIdentityLT applies the LT predicate on the "primary_identity" field.
func PrimaryIdentityLT(v string) predicate.Msisdn {
	return predicate.Msisdn(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPrimaryIdentity), v))
	})
}

// PrimaryIdentityLTE applies the LTE predicate on the "primary_identity" field.
func PrimaryIdentityLTE(v string) predicate.Msisdn {
	return predicate.Msisdn(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPrimaryIdentity), v))
	})
}

// PrimaryIdentityContains applies the Contains predicate on the "primary_identity" field.
func PrimaryIdentityContains(v string) predicate.Msisdn {
	return predicate.Msisdn(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPrimaryIdentity), v))
	})
}

// PrimaryIdentityHasPrefix applies the HasPrefix predicate on the "primary_identity" field.
func PrimaryIdentityHasPrefix(v string) predicate.Msisdn {
	return predicate.Msisdn(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPrimaryIdentity), v))
	})
}

// PrimaryIdentityHasSuffix applies the HasSuffix predicate on the "primary_identity" field.
func PrimaryIdentityHasSuffix(v string) predicate.Msisdn {
	return predicate.Msisdn(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPrimaryIdentity), v))
	})
}

// PrimaryIdentityEqualFold applies the EqualFold predicate on the "primary_identity" field.
func PrimaryIdentityEqualFold(v string) predicate.Msisdn {
	return predicate.Msisdn(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPrimaryIdentity), v))
	})
}

// PrimaryIdentityContainsFold applies the ContainsFold predicate on the "primary_identity" field.
func PrimaryIdentityContainsFold(v string) predicate.Msisdn {
	return predicate.Msisdn(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPrimaryIdentity), v))
	})
}

// PrimaryIdentityTypeEQ applies the EQ predicate on the "primary_identity_type" field.
func PrimaryIdentityTypeEQ(v model.PrimaryIdentityType) predicate.Msisdn {
	vc := v
	return predicate.Msisdn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrimaryIdentityType), vc))
	})
}

// PrimaryIdentityTypeNEQ applies the NEQ predicate on the "primary_identity_type" field.
func PrimaryIdentityTypeNEQ(v model.PrimaryIdentityType) predicate.Msisdn {
	vc := v
	return predicate.Msisdn(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrimaryIdentityType), vc))
	})
}

// PrimaryIdentityTypeIn applies the In predicate on the "primary_identity_type" field.
func PrimaryIdentityTypeIn(vs ...model.PrimaryIdentityType) predicate.Msisdn {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Msisdn(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPrimaryIdentityType), v...))
	})
}

// PrimaryIdentityTypeNotIn applies the NotIn predicate on the "primary_identity_type" field.
func PrimaryIdentityTypeNotIn(vs ...model.PrimaryIdentityType) predicate.Msisdn {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Msisdn(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPrimaryIdentityType), v...))
	})
}

// ProvisionedEQ applies the EQ predicate on the "provisioned" field.
func ProvisionedEQ(v bool) predicate.Msisdn {
	return predicate.Msisdn(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProvisioned), v))
	})
}

// ProvisionedNEQ applies the NEQ predicate on the "provisioned" field.
func ProvisionedNEQ(v bool) predicate.Msisdn {
	return predicate.Msisdn(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProvisioned), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Msisdn) predicate.Msisdn {
	return predicate.Msisdn(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Msisdn) predicate.Msisdn {
	return predicate.Msisdn(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Msisdn) predicate.Msisdn {
	return predicate.Msisdn(func(s *sql.Selector) {
		p(s.Not())
	})
}
