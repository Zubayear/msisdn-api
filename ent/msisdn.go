// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"huspass/ent/msisdn"
	"huspass/model"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Msisdn is the model entity for the Msisdn schema.
type Msisdn struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// PrimaryIdentity holds the value of the "primary_identity" field.
	PrimaryIdentity string `json:"primary_identity,omitempty"`
	// PrimaryIdentityType holds the value of the "primary_identity_type" field.
	PrimaryIdentityType model.PrimaryIdentityType `json:"primary_identity_type,omitempty"`
	// Provisioned holds the value of the "provisioned" field.
	Provisioned bool `json:"provisioned,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Msisdn) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case msisdn.FieldProvisioned:
			values[i] = new(sql.NullBool)
		case msisdn.FieldPrimaryIdentity, msisdn.FieldPrimaryIdentityType:
			values[i] = new(sql.NullString)
		case msisdn.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Msisdn", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Msisdn fields.
func (m *Msisdn) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case msisdn.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				m.ID = *value
			}
		case msisdn.FieldPrimaryIdentity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field primary_identity", values[i])
			} else if value.Valid {
				m.PrimaryIdentity = value.String
			}
		case msisdn.FieldPrimaryIdentityType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field primary_identity_type", values[i])
			} else if value.Valid {
				m.PrimaryIdentityType = model.PrimaryIdentityType(value.String)
			}
		case msisdn.FieldProvisioned:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field provisioned", values[i])
			} else if value.Valid {
				m.Provisioned = value.Bool
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Msisdn.
// Note that you need to call Msisdn.Unwrap() before calling this method if this Msisdn
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Msisdn) Update() *MsisdnUpdateOne {
	return (&MsisdnClient{config: m.config}).UpdateOne(m)
}

// Unwrap unwraps the Msisdn entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Msisdn) Unwrap() *Msisdn {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Msisdn is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Msisdn) String() string {
	var builder strings.Builder
	builder.WriteString("Msisdn(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("primary_identity=")
	builder.WriteString(m.PrimaryIdentity)
	builder.WriteString(", ")
	builder.WriteString("primary_identity_type=")
	builder.WriteString(fmt.Sprintf("%v", m.PrimaryIdentityType))
	builder.WriteString(", ")
	builder.WriteString("provisioned=")
	builder.WriteString(fmt.Sprintf("%v", m.Provisioned))
	builder.WriteByte(')')
	return builder.String()
}

// Msisdns is a parsable slice of Msisdn.
type Msisdns []*Msisdn

func (m Msisdns) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}
